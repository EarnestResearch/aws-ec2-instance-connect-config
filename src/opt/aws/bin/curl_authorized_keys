#!/bin/sh

# Reads and echoes EC2 Metadata to get the authorized keys blob for the user $1

if [ -z "${1}" ] ; then
    exit 1
fi

userpath=$(mktemp -d /tmp/tmp-XXXXXXXX)
chmod 700 $userpath # Disallow any other writes to tempdir
trap 'rm -rf "${userpath}"' EXIT
signerkeyfile=signer-cert.pem
keysfile=allowed-keys

OPENSSL=/usr/bin/openssl

# Verify that we have active keys.  Fast-fail if we do not.
curl_command="curl -s -f -m 1 http://169.254.169.254/latest/meta-data/managed-ssh-keys/active-keys/${1}/"
if [ ! -n "$(eval "${curl_command}")" ]
then
    exit 255
fi

# Read the current signer cert
# This will overwrite whatever currently exists, so it will remain up-to-date
certificate=$(curl -s -f -m 1 "http://169.254.169.254/latest/meta-data/managed-ssh-keys/signer-cert/")
if [ ! -n "${certificate}" ]
then
  exit 255
fi

# Read the signer OCSP staples
staple_paths=$(curl -s -f -m 1 "http://169.254.169.254/latest/meta-data/managed-ssh-keys/signer-ocsp/")
ocsp_path=$(mktemp $userpath/tmp-XXXXXXXX)
chmod 700 $ocsp_path # Disallow any other writes to tempdir
for word in $staple_paths
do
    curl -s -f -m 1 "http://169.254.169.254/latest/meta-data/managed-ssh-keys/signer-ocsp/${word}" > $ocsp_path/$word
    chmod 400 $ocsp_path/$word # Disable access to staple file
done

instance=$(curl -s -f -m 1 "http://169.254.169.254/latest/meta-data/instance-id/")
if [ ! -n "${instance}" ]
then
  exit 255
fi

zone=$(curl -s -f -m 1 "http://169.254.169.254/latest/meta-data/placement/availability-zone/")
region=$(echo $zone | sed -n 's/\([a-z]\+-[a-z]\+-[0-9]\+\).*/\1/p')
domain=$(curl -s -f -m 1 "http://169.254.169.254/latest/meta-data/services/domain/")
expected_signer=$(printf 'managed-ssh-signer.%s.%s' "${region}" "${domain}")

# Invoke key parser (will automagically echo the results)
DIR="$( cd "$( dirname "${0}" )" && pwd )"
if [ -z "${2}" ] ; then
    output=$($DIR/parse_authorized_keys -x false -r "${curl_command}" -o "${OPENSSL}" -d "${userpath}" -s "${certificate}" -i "${instance}" -c "${expected_signer}" -a "/etc/ssl/certs/ca-bundle.crt" -v "${ocsp_path}")
    exitcode=$? # not quote-escaped since this must be numeric 0-255
else
    output=$($DIR/parse_authorized_keys -x false -r "${curl_command}" -o "${OPENSSL}" -d "${userpath}" -s "${certificate}" -i "${instance}" -c "${expected_signer}" -a "/etc/ssl/certs/ca-bundle.crt" -v "${ocsp_path}" -f "${2}")
    exitcode=$? # not quote-escaped since this must be numeric 0-255
fi

echo "${output}"
exit $exitcode
